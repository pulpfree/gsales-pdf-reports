AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Gales Sales PDF Reports Service

Parameters:
  IAMUsername:
    Description: Username of the IAM user for this service
    Type: String
    Default: sysadmin
  ParamKMSKeyID:
    Description: KMS key id
    Type: String
  # ParamThundraKey:
  #   Description: thundra.io API key
  #   Type: String
  # ParamLambdaBucket:
  #   Description: Bucket for lambda deployment
  #   Type: String
  ParamReportBucket:
    Description: Bucket for report files
    Type: String
  # ParamAuthLambda:
    # Type: String
  ParamProjectName:
    Description: Project name
    Type: String

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    DeletionPolicy: Delete
    DependsOn: Lambda
    Properties:
      StageName: Prod
      # Cors: "'*'"
      Cors:
        AllowMethods: "'GET,OPTIONS,POST,PUT'"
        AllowHeaders: "'Authorization,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      # EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            # FunctionArn: !Sub "${ParamAuthLambda}"
            FunctionArn: !GetAtt AuthLambda.Arn
            Identity:
              ReauthorizeEvery: 300
    #   Auth:
    #     DefaultAuthorizer: LambdaTokenAuthorizer
    #     Authorizers:
    #       LambdaTokenAuthorizer:
    #         FunctionArn: !GetAtt AuthLambda.Arn
    #         Identity:
    #           # ReauthorizeEvery: 0
    #           ReauthorizeEvery: 300

  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: go1.x
      CodeUri: ./dist
      Handler: /report
      Role: !GetAtt LambdaRole.Arn
      # Environment:
        # Variables:
        #   API_URL: !Join
        #     - ''
        #     - - https://
        #       - !Ref ServerlessRestApi
        #       - .execute-api.
        #       - !Ref 'AWS::Region'
        #       - .amazonaws.com
        #       - /Prod/
      # Timeout: 10
      Timeout: 20 # for testing only
      MemorySize: 512
      Environment:
        Variables:
          Stage: prod
      VpcConfig:
        # TODO: these should be extracted into params and .env file
        SecurityGroupIds:
          - sg-5afb2932
          - sg-8f6baee7
        SubnetIds:
          - subnet-0da8d176
          - subnet-7f092816
      Tags:
        BillTo: 'Gales'
      Events:
        Report:
          Type: Api
          Properties:
            Path: /report
            Method: post
            RestApiId: !Ref RestApi
            Auth:
              # Authorizer: LambdaTokenAuthorizer
              Authorizer: NONE
        Ping:
          Type: Api
          Properties:
            Path: /report
            Method: get
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: LambdaTokenAuthorizer
              # Authorizer: NONE

  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: /authorizer
      Runtime: go1.x
      Tags:
        BillTo: 'Gales'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParametersByPath
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/${ParamProjectName}*
      - PolicyName: FunctionKMS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ParamKMSKeyID}
      - PolicyName: FunctionLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: FunctionXRayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
      - PolicyName: FunctionS3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: 
              # - Fn::Sub: arn:aws:s3:::${ParamLambdaBucket}/*
              Fn::Sub: arn:aws:s3:::${ParamReportBucket}/*
      - PolicyName: FunctionVPCAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            Resource: '*'

Outputs:
  ApiId:
    Description: API ID
    Value:
      Ref: RestApi
  ApiEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiArn:
    Description: "API ARN"
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/"
  LambdaArn:
    Description: "Lambda ARN"
    Value: !GetAtt Lambda.Arn
  AuthLambdaArn:
    Description: "Authorizer Lambda ARN"
    Value: !GetAtt AuthLambda.Arn
  LambdaRoleArn:
    Description: "Lambda Role ARN"
    Value: !GetAtt LambdaRole.Arn